<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title><%= user.username %> のカレンダー</title>
  <link rel="stylesheet" href="/css/style.css">
  <!-- FullCalendar CSS -->
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
</head>
<body>
  <header>
    <h1><%= user.username %> のカレンダー（閲覧専用）</h1>
    <nav>
      <a href="/admin/users">ユーザー一覧に戻る</a>
    </nav>
  </header>
  <!-- 月合計表示 -->
  <div id="monthTotal" style="font-weight:bold; margin-bottom:10px;"></div>
  <!-- カレンダー表示領域に最低高さを設定 -->
  <div id="calendar" style="min-height:400px;"></div>
  <!-- FullCalendar JS -->
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
  <script>
    async function loadCalendar() {
      try {
        // API から対象ユーザーの入力データを取得
        const response = await fetch('/api/records?userId=<%= user._id %>');
        console.log("Response status:", response.status);
        console.log("Content-Type:", response.headers.get('content-type'));
        
        // JSON パースを試みる
        const records = await response.json();
        console.log("Records:", records);
        
        // ユーザーごとの運賃情報は EJS 経由で渡される
        const fares = <%- JSON.stringify(user.fares) %>;

        // 各レコードから FullCalendar のイベントを生成
        const events = records.map(record => {
          let total = 0;
          for (let key in record.quantities) {
            total += (record.quantities[key] || 0) * (fares[key] || 0);
          }
          return {
            title: '¥' + total,
            start: record.date
          };
        });
        
        // FullCalendar の初期化
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
          initialView: 'dayGridMonth',
          events: events,
          // 表示期間が変わったときに当月の合計金額を計算して表示
          datesSet: function(info) {
            let monthTotal = 0;
            records.forEach(record => {
              const recordDate = new Date(record.date);
              if (recordDate >= info.start && recordDate < info.end) {
                let dailyTotal = 0;
                for (let key in record.quantities) {
                  dailyTotal += (record.quantities[key] || 0) * (fares[key] || 0);
                }
                monthTotal += dailyTotal;
              }
            });
            document.getElementById("monthTotal").textContent = "月合計: ¥" + monthTotal;
          },
          // 閲覧専用：日付クリック時は編集不可の旨を通知
          dateClick: function(info) {
            alert("閲覧専用です。編集はできません。");
          }
        });
        calendar.render();
      } catch (error) {
        console.error("Error loading calendar:", error);
      }
    }
    
    document.addEventListener('DOMContentLoaded', loadCalendar);
  </script>
</body>
</html>
